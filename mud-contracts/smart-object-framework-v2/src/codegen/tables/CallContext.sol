// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct CallContextData {
  bool exists;
  bytes32 executionId;
  address msgSender;
  uint256 msgValue;
  ResourceId systemId;
  bytes4 functionId;
  bytes argsData;
}

library CallContext {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "eveworld", name: "CallContext", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462657665776f726c6400000000000043616c6c436f6e746578740000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0079060101201420200400000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, bytes32, address, uint256, bytes32, bytes4, bytes)
  Schema constant _valueSchema = Schema.wrap(0x00790601605f611f5f43c4000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "callId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "exists";
    fieldNames[1] = "executionId";
    fieldNames[2] = "msgSender";
    fieldNames[3] = "msgValue";
    fieldNames[4] = "systemId";
    fieldNames[5] = "functionId";
    fieldNames[6] = "argsData";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get exists.
   */
  function getExists(bytes32 callId) internal view returns (bool exists) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get exists.
   */
  function _getExists(bytes32 callId) internal view returns (bool exists) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set exists.
   */
  function setExists(bytes32 callId, bool exists) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((exists)), _fieldLayout);
  }

  /**
   * @notice Set exists.
   */
  function _setExists(bytes32 callId, bool exists) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((exists)), _fieldLayout);
  }

  /**
   * @notice Get executionId.
   */
  function getExecutionId(bytes32 callId) internal view returns (bytes32 executionId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get executionId.
   */
  function _getExecutionId(bytes32 callId) internal view returns (bytes32 executionId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set executionId.
   */
  function setExecutionId(bytes32 callId, bytes32 executionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((executionId)), _fieldLayout);
  }

  /**
   * @notice Set executionId.
   */
  function _setExecutionId(bytes32 callId, bytes32 executionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((executionId)), _fieldLayout);
  }

  /**
   * @notice Get msgSender.
   */
  function getMsgSender(bytes32 callId) internal view returns (address msgSender) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get msgSender.
   */
  function _getMsgSender(bytes32 callId) internal view returns (address msgSender) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set msgSender.
   */
  function setMsgSender(bytes32 callId, address msgSender) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((msgSender)), _fieldLayout);
  }

  /**
   * @notice Set msgSender.
   */
  function _setMsgSender(bytes32 callId, address msgSender) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((msgSender)), _fieldLayout);
  }

  /**
   * @notice Get msgValue.
   */
  function getMsgValue(bytes32 callId) internal view returns (uint256 msgValue) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get msgValue.
   */
  function _getMsgValue(bytes32 callId) internal view returns (uint256 msgValue) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set msgValue.
   */
  function setMsgValue(bytes32 callId, uint256 msgValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((msgValue)), _fieldLayout);
  }

  /**
   * @notice Set msgValue.
   */
  function _setMsgValue(bytes32 callId, uint256 msgValue) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((msgValue)), _fieldLayout);
  }

  /**
   * @notice Get systemId.
   */
  function getSystemId(bytes32 callId) internal view returns (ResourceId systemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return ResourceId.wrap(bytes32(_blob));
  }

  /**
   * @notice Get systemId.
   */
  function _getSystemId(bytes32 callId) internal view returns (ResourceId systemId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return ResourceId.wrap(bytes32(_blob));
  }

  /**
   * @notice Set systemId.
   */
  function setSystemId(bytes32 callId, ResourceId systemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked(ResourceId.unwrap(systemId)), _fieldLayout);
  }

  /**
   * @notice Set systemId.
   */
  function _setSystemId(bytes32 callId, ResourceId systemId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked(ResourceId.unwrap(systemId)), _fieldLayout);
  }

  /**
   * @notice Get functionId.
   */
  function getFunctionId(bytes32 callId) internal view returns (bytes4 functionId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (bytes4(_blob));
  }

  /**
   * @notice Get functionId.
   */
  function _getFunctionId(bytes32 callId) internal view returns (bytes4 functionId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (bytes4(_blob));
  }

  /**
   * @notice Set functionId.
   */
  function setFunctionId(bytes32 callId, bytes4 functionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((functionId)), _fieldLayout);
  }

  /**
   * @notice Set functionId.
   */
  function _setFunctionId(bytes32 callId, bytes4 functionId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((functionId)), _fieldLayout);
  }

  /**
   * @notice Get argsData.
   */
  function getArgsData(bytes32 callId) internal view returns (bytes memory argsData) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (bytes(_blob));
  }

  /**
   * @notice Get argsData.
   */
  function _getArgsData(bytes32 callId) internal view returns (bytes memory argsData) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (bytes(_blob));
  }

  /**
   * @notice Set argsData.
   */
  function setArgsData(bytes32 callId, bytes memory argsData) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((argsData)));
  }

  /**
   * @notice Set argsData.
   */
  function _setArgsData(bytes32 callId, bytes memory argsData) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((argsData)));
  }

  /**
   * @notice Get the length of argsData.
   */
  function lengthArgsData(bytes32 callId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of argsData.
   */
  function _lengthArgsData(bytes32 callId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of argsData.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemArgsData(bytes32 callId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Get an item of argsData.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemArgsData(bytes32 callId, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /**
   * @notice Push a slice to argsData.
   */
  function pushArgsData(bytes32 callId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to argsData.
   */
  function _pushArgsData(bytes32 callId, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from argsData.
   */
  function popArgsData(bytes32 callId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from argsData.
   */
  function _popArgsData(bytes32 callId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of argsData at `_index`.
   */
  function updateArgsData(bytes32 callId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of argsData at `_index`.
   */
  function _updateArgsData(bytes32 callId, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 callId) internal view returns (CallContextData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 callId) internal view returns (CallContextData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 callId,
    bool exists,
    bytes32 executionId,
    address msgSender,
    uint256 msgValue,
    ResourceId systemId,
    bytes4 functionId,
    bytes memory argsData
  ) internal {
    bytes memory _staticData = encodeStatic(exists, executionId, msgSender, msgValue, systemId, functionId);

    EncodedLengths _encodedLengths = encodeLengths(argsData);
    bytes memory _dynamicData = encodeDynamic(argsData);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 callId,
    bool exists,
    bytes32 executionId,
    address msgSender,
    uint256 msgValue,
    ResourceId systemId,
    bytes4 functionId,
    bytes memory argsData
  ) internal {
    bytes memory _staticData = encodeStatic(exists, executionId, msgSender, msgValue, systemId, functionId);

    EncodedLengths _encodedLengths = encodeLengths(argsData);
    bytes memory _dynamicData = encodeDynamic(argsData);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 callId, CallContextData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.exists,
      _table.executionId,
      _table.msgSender,
      _table.msgValue,
      _table.systemId,
      _table.functionId
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.argsData);
    bytes memory _dynamicData = encodeDynamic(_table.argsData);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 callId, CallContextData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.exists,
      _table.executionId,
      _table.msgSender,
      _table.msgValue,
      _table.systemId,
      _table.functionId
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.argsData);
    bytes memory _dynamicData = encodeDynamic(_table.argsData);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      bool exists,
      bytes32 executionId,
      address msgSender,
      uint256 msgValue,
      ResourceId systemId,
      bytes4 functionId
    )
  {
    exists = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    executionId = (Bytes.getBytes32(_blob, 1));

    msgSender = (address(Bytes.getBytes20(_blob, 33)));

    msgValue = (uint256(Bytes.getBytes32(_blob, 53)));

    systemId = ResourceId.wrap(Bytes.getBytes32(_blob, 85));

    functionId = (Bytes.getBytes4(_blob, 117));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (bytes memory argsData) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    argsData = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (CallContextData memory _table) {
    (
      _table.exists,
      _table.executionId,
      _table.msgSender,
      _table.msgValue,
      _table.systemId,
      _table.functionId
    ) = decodeStatic(_staticData);

    (_table.argsData) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 callId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 callId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool exists,
    bytes32 executionId,
    address msgSender,
    uint256 msgValue,
    ResourceId systemId,
    bytes4 functionId
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(exists, executionId, msgSender, msgValue, systemId, functionId);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(bytes memory argsData) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(bytes(argsData).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(bytes memory argsData) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((argsData)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool exists,
    bytes32 executionId,
    address msgSender,
    uint256 msgValue,
    ResourceId systemId,
    bytes4 functionId,
    bytes memory argsData
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(exists, executionId, msgSender, msgValue, systemId, functionId);

    EncodedLengths _encodedLengths = encodeLengths(argsData);
    bytes memory _dynamicData = encodeDynamic(argsData);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 callId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = callId;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
